#include <iostream>
#include <tuple>
#include <algorithm>
#include <vector>

using namespace std;

// * 마감 시간 내에 일을 모두 처리할 수 있는 범위 내에서, 일을 최대한 늦게 시작할 수 있는 시간

int main() {
    int n;
    cin >> n;

    // Ti, Si 입력 -> Ti: 업무 처리하는데 걸리는 시간, Si: 업무를 끝내야 하는 시간
    // ? 최대 시작 시간(Si - Ti)이 이른 작업부터 처리한다.
    vector<tuple<int, int, int>> works;

    for (int i = 0; i < n; ++i) {
        int Ti, Si;
        cin >> Ti >> Si;
        works.push_back(make_tuple(Si - Ti, Si, Ti));
    }

    sort(works.begin(), works.end()); // 오름차순 정렬

    int result;
    // min(현재 업무를 처리하는 데 필요한 최대 시작 시간, 다음 업무 최대 시작 시간 - 현재 업무를 처리하는 데 걸리는 시간)
    result = min(get<0>(works[0]), get<0>(works[1]) - get<2>(works[0]));

    if (result < 0) {
        cout << -1 << '\n';
        return 0;
    }

    int time = result;
    for (int i = 0; i < n; ++i) {
        // 현재 업무 시간을 누적
        time += get<2>(works[i]);
        // 업무가 끝나는 시간이 마감 기한보다 늦으면,
        if (time > get<1>(works[i])) {
            // 업무 시작 시간을 앞서는 시간만큼 앞당긴다
            result = result - (time - get<1>(works[i]));
            if (result < 0) {
                cout << -1 << '\n';
                return 0;
            }
            time = get<1>(works[i]);
        }
    }

    cout << result << '\n';
    
    return 0;
}

// 2 5 -> 최소 3시 부터는 작업을 시작해야 한다.
// 3 5 -> 최소 2시 부터는 작업을 시작해야 한다.
// 8 14 -> 최소 6시 부터는 작업을 시작해야 한다.
// 1 16 -> 최소 15시 부터는 작업을 시작해야 한다.
// 5 20 -> 최소 15시 부터는 작업을 시작해야 한다.

// 3 5 -> 최소 2시 부터는 작업을 시작해야 한다. :: 3 - 3 = 0시(<= 2시)에 시작 -> 3시
// 2 5 -> 최소 3시 부터는 작업을 시작해야 한다. :: 3시(<= 3시)에 시작 -> 5시 
// 8 14 -> 최소 6시 부터는 작업을 시작해야 한다. :: 5시(<= 6시)에 시작 -> 13시
// 1 16 -> 최소 15시 부터는 작업을 시작해야 한다. :: 13시(<= 15시)에 시작 -> 14시
// 5 20 -> 최소 15시 부터는 작업을 시작해야 한다. :: 14시(<= 15시)에 시작 -> 19시

// 4 10 -> 최소 6시 부터는 작업을 시작해야 한다. :: 6 - 4 = 2시에 시작 -> 6시
// 8 14 -> 최소 6시 부터는 작업을 시작해야 한다. :: 6시(<= 6시)에 시작 -> 14시
// 1 16 -> 최소 15시 부터는 작업을 시작해야 한다. :: 14시(<= 15시)에 시작 -> 15시
// 5 20 -> 최소 15시 부터는 작업을 시작해야 한다. :: 15시(<= 15시)에 시작 -> 20시

// 3 5 -> 최소 2시 부터 작업 시작 :: 6 - 3 = 3시
// 8 14 -> 최소 6시 부터 작업 시작
// 1 16 -> 최소 15시 부터 작업 시작
// 5 20 -> 최소 15시 부터 작업 시작
// 4 20 -> 최소 16시 부터 작업 시작

// 1 4 -> 최소 3시 부터는 작업을 시작해야 한다. :: min(3, 3-1) = 2시(<= 3시)에 시작 -> 3시
// 2 5 -> 최소 3시 부터는 작업을 시작해야 한다. :: 3시(<= 3시)에 시작 -> 5시 
// 8 14 -> 최소 6시 부터는 작업을 시작해야 한다. :: 5시(<= 6시)에 시작 -> 13시
// 1 16 -> 최소 15시 부터는 작업을 시작해야 한다. :: 13시(<= 15시)에 시작 -> 14시
// 5 20 -> 최소 15시 부터는 작업을 시작해야 한다. :: 14시(<= 15시)에 시작 -> 19시

// 4 5 -> 최소 2시 부터는 작업을 시작해야 한다. :: min(2, 3-4) = -1 불가능
// 2 5 -> 최소 3시 부터는 작업을 시작해야 한다. 
// 8 14 -> 최소 6시 부터는 작업을 시작해야 한다. 
// 1 16 -> 최소 15시 부터는 작업을 시작해야 한다.
// 5 20 -> 최소 15시 부터는 작업을 시작해야 한다. 

// ? 가장 늦게 끝내도 되는 작업을 맨 뒤로 미룬다 -> 첫 작업을 늦게 시작할 수 있다.
// 5 20 -> 최소 15시 부터 작업 시작 :: 15시에 시작 == 20 - 5
// 1 16 -> 최소 15시 부터 작업 시작 :: 14시에 시작 == min(15 - 1, 15)
// 8 14 -> 최소 6시 부터 작업 시작 :: 6시에 시작 == min(14 - 8, 6)
// 3 5 -> 최소 2시 부터 작업 시작 :: 3시에 시작 == min(6 - 3, 2)

// 5 20 -> 늦어도 15시 부터는 작업을 시작해야 한다. :: 20 - 5 == 15시에 시작
// 1 16 -> 늦어도 15시 부터는 작업을 시작해야 한다. :: min(15 - 1, 15) == 14시에 시작
// 10 14 -> 늦어도 4시 부터는 작업을 시작해야 한다. :: min(14 - 10, 4) == 4시에 시작
// 2 5 -> 늦어도 3시 부터는 작업을 시작해야 한다. :: min(4 - 2, 3) == 2시에 시작
// 1 4 -> 늦어도 3시 부터는 작업을 시작해야 한다. :: min(2 - 1, 3) == 1시에 시작


// 5 20 -> 늦어도 15시 부터는 작업을 시작해야 한다. :: 20 - 5 == 15시에 시작
// 1 16 -> 늦어도 15시 부터는 작업을 시작해야 한다. :: min(15 - 1, 15) == 14시에 시작
// 8 14 -> 늦어도 6시 부터는 작업을 시작해야 한다. :: min(14 - 8, 6) == 6시에 시작
// 2 5 -> 늦어도 3시 부터는 작업을 시작해야 한다. :: min(6 - 2, 3) == 3시에 시작
// 4 5 -> 늦어도 2시 부터는 작업을 시작해야 한다. :: min(2, 3-4) = -1 불가능

// 5 20 -> 늦어도 15시 부터는 작업을 시작해야 한다. :: 20 - 5 == 15시에 시작
// 1 16 -> 늦어도 15시 부터는 작업을 시작해야 한다. :: min(15 - 1, 15) == 14시에 시작
// 8 14 -> 늦어도 6시 부터는 작업을 시작해야 한다. :: min(14 - 8, 6) == 6시에 시작
// 4 5 -> 늦어도 1시 부터는 작업을 시작해야 한다. :: min(6 - 4, 1) == 1시에 시작
// 3 5 -> 늦어도 2시 부터는 작업을 시작해야 한다. :: min(1 - 3, 2) = -1 불가능